@model Tuple<AHDDManagerClass.TransactionDetails, AHDDManagerClass.Payments, AHDDManagerClass.Transaction, AHDDManagerClass.Refunds>

@{
    ViewBag.Title = "Receipt Details";
}

<script src="~/Scripts/Utilities.js"></script>

<!-- NEEDED FOR SPINNER DIALOG -->
<style>
    #payMethodButtons .btn {
        color: #888888;
    }

    #payMethodButtons button.selected {
        color: #ffffff;
        background-color: #5cb85c;
    }
</style>

<script>
    $(function () {
        var CustomerID;

        $.fn.bootstrapBtn = $.fn.button.noConflict();
        $('[data-toggle="popover"]').popover();

        var newpaymentdialog = $("#new-payment-dialog").dialog({
            autoOpen: false,
            draggable:false,
            //height: 350,
            width: 500,
            modal: true,
            buttons: {
                "Update": UpdatePayment,
                Cancel: function () {
                    newpaymentdialog.dialog("close");
                }
            },
            close: function () {
                newpaymentdialog.dialog("close");
            }
        });

        var refunddialog = $("#refund-dialog").dialog({
            autoOpen: false,
            draggable:false,
            height: 350,
            width: 700,
            modal: true,
            buttons: {
                "Submit": function(){
                    AddRefund();
                },
                "No Refund": function () {
                    cancelTransaction();
                }
            },
            close: function () {
                refunddialog.dialog("close");
            }
        });
        /*
                $(".refund").on('click', function(){
                    event.preventDefault();
                    refunddialog.dialog("open");
                });
        */
        $("#tblTransDetails").on('click', '.delete', function (event) {
            event.preventDefault();

            var tdid = $(this).attr("id");

            //DeleteTransactionDetail
            $.ajax({
                url: '/transactions/DeleteTransactionDetail/',
                type: 'POST',
                data: JSON.stringify({ TransactionDetailID: tdid }),
                dataType: 'json',
                traditional: true,
                contentType: 'application/json;',
                success: function (result) { //result is returned as an arry of base flavors
                    if (result.length == 1) {
                        //alert('The Transaction Detail has been deleted.');
                        $.AlertDialog('The Receipt Detail has been deleted.', 'Success', function (event) { }, 'lightgreen');

                        location.reload();
                    } else {
                        //alert("Error: The Transaction Detail FAILED to delete.");
                        $.AlertDialog('Error: The Receipt Detail FAILED to delete.', 'Error Message', function (event) { }, 'lightcoral');
                    }
                }
            });
        });

        $("#tblPayments").on('click', '.deletepayment', function (event) {
            event.preventDefault();

            var payid = $(this).attr("id");

            //DeleteTransactionDetail
            $.ajax({
                url: '/transactions/DeletePayment/',
                type: 'POST',
                data: JSON.stringify({ PaymentID: payid }),
                dataType: 'json',
                traditional: true,
                contentType: 'application/json;',
                success: function (result) { //result is returned as an arry of base flavors
                    if (result.length == 1) {
                        //alert('The payment has been deleted.');
                        $.AlertDialog('The payment has been deleted.', 'Success', function (event) { }, 'lightgreen');

                        location.reload();
                    } else {
                        // alert("Error: The payment FAILED to delete.");
                        $.AlertDialog('Error: The payment FAILED to delete.', 'Error Message', function (event) { }, 'lightcoral');
                    }
                }
            });

        });



        function AddRefund() {

            if ($("#txtRefundAmount").val() == ''){
                $("#txtRefundAmount").css('border-color','red');
                //alert('Refund amount is required.');
                $.AlertDialog('Refund amount is required.', 'Error Message', function (event) { }, 'lightcoral');
                return;
            }
            else
            {
                $("#txtRefundAmount").css('border-color','#cccccc');
            }

            if ($("#txtRefundNote").val() == ''){
                $("#txtRefundNote").css('border-color','red');
                //alert('Refund Note is required.');
                $.AlertDialog('Refund Note is required.', 'Error Message', function (event) { }, 'lightcoral');
                return;
            }
            else
            {
                $("#txtRefundNote").css('border-color','#cccccc');
            }

            if (parseFloat($("#lblDialogPaid").text().replace("$","").replace(",","")) < parseFloat($("#txtRefundAmount").val())){
                //alert('You cannot pay more than ' + $("#lblDialogPaid").text());
                $.AlertDialog('You cannot pay more than ' + $("#lblDialogPaid").text(), 'Error Message', function (event) { }, 'lightcoral');
                return;
            }

            //$("#txtAmount").formatCurrency();


            $.ConfirmDialog('You are about to refund ' + $("#txtRefundAmount").val() + ". Continue?", 'Refund', function () {
                var _refund = {
                    RefundID: 0,
                    TransactionID: @ViewContext.RouteData.Values["id"],
                    RefundAmount: $("#txtRefundAmount").val(),
                    Note: $("#txtRefundNote").val(),
                    RefundDate: (new Date()).toLocaleString() //PT - add time in the client side
                };

                $.ajax({
                    url: '/transactions/AddRefund/',
                    type: 'POST',
                    data: JSON.stringify({ Refund: _refund }),
                    dataType: 'json',
                    traditional: true,
                    contentType: 'application/json;',
                    success: function (result) { //result is returned as an arry of base flavors

                        if (result == 1) {
                            cancelTransaction();
                            //location.reload();
                        } else {
                            //alert("Error: Refund was not recorded. Transaction was not cancelled.");
                            $.AlertDialog('Error: Refund was not recorded. Receipt was not cancelled.', 'Error Message', function (event) { }, 'lightcoral');
                        }
                    }
                });
            }, function () { return; }, null);
        }


        function UpdatePayment() {
            if ($("#txtPaymentAmount").val() == '' || $("#txtPaymentAmount").val() <= 0){
                $("#txtPaymentAmount").css('border-color', 'red');
                //alert('Amount is required.');
                $.AlertDialog('Amount is required.', 'Error Message', function (event) { }, 'lightcoral');
                return;
            }
            else
            {
                $("#txtPaymentAmount").css('border-color','#cccccc');
            }

            //if ($('#ddlPayMethod').find(":selected").val() == '2' && $("#txtCheckNumber").val() == '' ){
            //    $("#txtCheckNumber").css('border-color','red');
            //    //alert('Amount is required.');
            //    $.AlertDialog('Check Number is required if Payment Type is CHECK.', 'Error Message', function (event) { }, 'lightcoral');
            //    return;
            //}

            if ($("#payMethodButtons").find(".selected").length == 0) {
                $.AlertDialog('Select a payment method.', 'Error Message', function (event) { }, 'lightcoral');
                return;
            }



            if ($("#payMethodButtons").find(".selected").data('value') == 2 && $("#txtCheckNumber").val() == '' ){
                $("#txtCheckNumber").css('border-color','red');
                $.AlertDialog('Check Number is required if Payment Type is CHECK.', 'Error Message', function (event) { }, 'lightcoral');
                return;
            }
            else
            {
                $("#txtCheckNumber").css('border-color','#cccccc');
            }


            if (parseFloat($("#lblDialogOwed").text().replace("$","").replace(",","")) < parseFloat($("#txtPaymentAmount").val())){
                //alert('You cannot pay more than ' + $("#lblDialogOwed").text());
                $.AlertDialog('You cannot pay more than ' + $("#lblDialogOwed").text(), 'Error Message', function (event) { }, 'lightcoral');
                return;
            }


            if (parseFloat($("#lblDialogOwed").text().replace("$", "").replace(",", "")) != parseFloat($("#txtPaymentAmount").val())) {
                $.ConfirmDialog('You are about to take a payment of $' + $("#txtPaymentAmount").val() + '. Continue?', 'Confirm', MakePayment, function () { }, null, 'skyblue');
            } else {
                MakePayment()
            }


        }

        function MakePayment() {
                var _payment = {
                    CustomerID: @Model.Item3.CustomerID,
                    TransactionID: @ViewContext.RouteData.Values["id"],
                    AssociateID: 0,
                    PaymentAmount: $("#txtPaymentAmount").val(),
                    PaymentMethod: $("#payMethodButtons").find(".selected").data('value'),
                    CheckNumber: $("#txtCheckNumber").val(),
                    PaymentDate: (new Date()).toLocaleString()
                };

                $.ajax({
                    url: '/transactions/MakePayment/',
                    type: 'POST',
                    data: JSON.stringify({ payment: _payment }),
                    dataType: 'json',
                    traditional: true,
                    contentType: 'application/json;',
                    success: function (result) { //result is returned as an arry of base flavors
                        if (result == '1') {
                            newpaymentdialog.dialog("close");

                            location.reload();
                        } else {
                            //alert("Error: Customer update was failed.");
                            $.AlertDialog('Error: Customer update was failed.', 'Error Message', function (event) { }, 'lightcoral');
                        }
                    }
                });
            }

        $('.payment').on('click', function () {
            event.preventDefault();
            $("#txtPaymentAmount").css('border-color', '#cccccc');
            $("#payMethodButtons").find(".selected").removeClass("selected");
            $("#txtPaymentAmount").val(@Model.Item3.TotalOwed);
            newpaymentdialog.dialog("open");
        });


        function cancelTransaction(){
            $.ajax({
                url: '/transactions/CancelTransaction/',
                type: 'POST',
                data: JSON.stringify({ TransactionID: @ViewContext.RouteData.Values["id"], ModifiedDate: (new Date()).toLocaleString() }),
                dataType: 'json',
                traditional: true,
                contentType: 'application/json;',
                success: function (result) { //result is returned as an arry of base flavors
                    if (result == 1) {
                        //alert("Transaction was cancelled.");
                        //$.AlertDialog('Transaction was cancelled.', 'Success', function (event) {
                        //    refunddialog.dialog("close");
                        //    location.reload();
                        //}, 'lightgreen');
                        location.reload();
                    } else {
                        //alert(result);
                        $.AlertDialog(result, 'Error Message', function (event) { }, 'lightcoral');
                    }
                }
            });

        }


        $('.cancel').on('click', function () {
            event.preventDefault();

            refunddialog.dialog("open");
        });

        $('.complete').on('click', function () {
            event.preventDefault();

            $.ConfirmDialog('You are about to complete this transaction. Continue?', 'Complete Transaction', function () {
                $.ajax({
                    url: '/transactions/CompleteTransaction/',
                    type: 'POST',
                    data: JSON.stringify({ TransactionID: @ViewContext.RouteData.Values["id"], ModifiedDate: (new Date()).toLocaleString() }),
                    dataType: 'json',
                    traditional: true,
                    contentType: 'application/json;',
                    success: function (result) { //result is returned as an arry of base flavors
                        if (result == 1) {
                            //alert("Receipt was completed.");
                            location.reload();
                            //$.AlertDialog('Receipt was completed.', 'Success', function (event) { location.reload(); }, 'lightgreen');

                        } else {
                            //alert(result);
                            $.AlertDialog(result, 'Error Message', function (event) { }, 'lightcoral');
                        }
                    }
                });
            }, function () { return; }, null);
        });

        $('#lnkReOpen').on('click', function () {
            event.preventDefault();

            $.ConfirmDialog('You are about to reopen this receipt. Continue?', 'Confirmation', function () {
                $.ajax({
                    url: '/transactions/ReOpenTransaction/',
                    type: 'POST',
                    data: JSON.stringify({ TransactionID: @ViewContext.RouteData.Values["id"], ModifiedDate: (new Date()).toLocaleString() }),
                    dataType: 'json',
                    traditional: true,
                    contentType: 'application/json;',
                    success: function (result) { //result is returned as an arry of base flavors
                        if (result == 1) {
                            //alert("Transaction was completed.");
                            $.AlertDialog('Receipt was re-opened.', 'Success', function (event) { location.reload(); }, 'lightgreen');

                        } else {
                            //alert(result);
                            $.AlertDialog(result, 'Error Message', function (event) { }, 'lightcoral');
                        }
                    }
                });
            }, function () { return; }, null, 'lightcoral');
        });


        var newtransactiondialog = $("#new-transaction-dialog").dialog({
            autoOpen: false,
            draggable: false,
            //height: 500,
            width: $(window).width() * .6,
            stack: true,
            modal: true,
            buttons: {
                "Update": AddTransactionDetail,
                Cancel: function () {
                    newtransactiondialog.dialog("close");
                }
            },
            close: function () {
                newtransactiondialog.dialog("close");
            }
        });


        var listdialog = $("#list-dialog").dialog({
            autoOpen: false,
            draggable: false,
            height: 500,
            width: $(window).width() * .6,
            stack: true,
            modal: true,
            open: function () {
                $.ajax({
                    url: '/transactions/GetForms/',
                    dataType: "json",
                    success: function (data) {


                        $('#lstForms').empty();
                        var option = '';

                        $.each(data, function (index, item) {
                            option = '<option value="' + item.FormID + '" data-price=' + item.Price + '>' + item.Title + '</option>';
                            $('#lstForms').append(option);
                        });


                    }, error: function (xhr) {
                        //alert('Request Status: ' + xhr.status + ' Status Text: ' + xhr.statusText + ' ' + xhr.responseText);
                        $.AlertDialog('Request Status: ' + xhr.status + ' Status Text: ' + xhr.statusText + ' ' + xhr.responseText, 'Error Message', function (event) { }, 'lightcoral');
                    }
                });

            },
            buttons: {
                "OK": function () {
                    $('#hdnNewDetailFormID').val($('#lstForms').find(":selected").val());
                    $('#newDetailForms').val($('#lstForms').find(":selected").text());

                    $('#txtNewDetailPrice').val($('#lstForms').find(":selected").data('price'));
                    $('#txtNewDetailQuantity').val('1');

                    updateSubtotal();
                    listdialog.dialog("close");
                },
                Cancel: function () {
                    listdialog.dialog("close");
                }
            },
            close: function () {
                listdialog.dialog("close");
            }
        });

        $("#newDetailForms").autocomplete({
            source: function (request, response) {
                $.ajax({
                    beforeSend: function () {},
                    url: '/transactions/SearchForms/',
                    dataType: "json",
                    data: {
                        SearchCriteria: request.term
                    },
                    success: function (data) {
                        return response($.map(data, function (item) {
                            return {
                                label: item.Title,
                                value: item.FormID,
                                formprice: item.Price
                            };
                        }))
                    },
                    minLength: 2,
                });
            },
            select: function (event, ui) {

                $('#newDetailForms').val(ui.item.label);
                $('#txtNewDetailPrice').val(ui.item.formprice);
                $('#hdnNewDetailFormID').val(ui.item.value);
                $('#txtNewDetailQuantity').val('1');
                updateSubtotal();

                return false;
            },
            //focus: function (event, ui) {
            //    event.preventDefault();
            //    $(this).val(ui.item.label);
            //},
            change: function (event, ui) {
                if (!ui.item) {
                    $('#hdnNewDetailFormID').val('');
                    $('#txtNewDetailPrice').val('');
                    $('#txtNewDetailQuantity').val('');
                    updateSubtotal();

                    return false;
                }
            }
        });


    var changeCustomerDialog = $("#change-customer-dialog").dialog({
        autoOpen: false,
        draggable: false,
        width: 400,
        stack: true,
        modal: true,
        open: function () {
            $("#txtNewCustomerID").val("");
        },
        buttons: {
            "Accept": function () {
                var CustomerID = $("#txtNewCustomerID").val().trim();

                if (CustomerID == "" || isNaN(CustomerID)) {
                    $.AlertDialog('Error: New CustomerID field is invalid', 'Error Message', function (event) { }, 'lightcoral');
                    return;
                }
                $.ajax({
                    url: '/transactions/UpdateTransactionCustomer/',
                    type: 'POST',
                    data: JSON.stringify({ TransactionID: @ViewContext.RouteData.Values["id"], CustomerID: CustomerID }),
                    dataType: 'json',
                    traditional: true,
                    contentType: 'application/json;',
                    success: function (result) {
                        if (result.Res) {
                            changeCustomerDialog.dialog("close");
                            $.AlertDialog(result.Message, 'Success', function (event) { location.reload(); }, 'lightgreen');

                        } else {
                            $.AlertDialog(result.Message, 'Error Message', function (event) { }, 'lightcoral');
                        }
                    }
                });
            },
            Cancel: function () {
                changeCustomerDialog.dialog("close");
            }
        }
    });
    });


    function AddTransactionDetail() {
        var elements = document.querySelectorAll('[data-required="true"]');
        var alertTriggered = false;

        $.each(elements, function (index, item) {
            if (item.value == '') {
                item.style.borderColor = 'red';

                if (!alertTriggered) {
                    //alert(item.dataset.name + " is required.");
                    $.AlertDialog(item.dataset.name + ' is required.', 'Error Message', function (event) { }, 'lightcoral');
                    item.focus();
                }

                alertTriggered = true;
            }
            else {
                item.style.borderColor = '#cccccc';
            }
        });

        if (alertTriggered) {
            return;
        }


        if ($('#hdnNewDetailFormID').val() == '') {
            //alert('No transaction item has been selected.');
            $.AlertDialog('No item has been selected.', 'Error Message', function (event) { }, 'lightcoral');
            return;
        }

        if ($('#txtNewDetailDiscount').val() != '' && $('#txtNewDetailNote').val().trim() == '') {
            //alert('You must include a note if you are discounting the price.');
            $.AlertDialog('You must include a note if you are discounting the price.', 'Error Message', function (event) { }, 'lightcoral');
            $('#txtNewDetailDiscount').focus();
            return false;
        }

        var subtotal;

        if ($('#txtNewDetailDiscount').val() == '') {
            subtotal = parseFloat($('#txtNewDetailQuantity').val()) * parseFloat($('#txtNewDetailPrice').val());
        }
        else {
            subtotal = parseFloat($('#txtNewDetailQuantity').val()) * parseFloat($('#txtNewDetailDiscount').val());
        }

        if ($('#txtNewDetailDiscount').val() != '') {
            subtotal = subtotal - parseFloat($('#txtNewDetailDiscount').val());
        }

        var transactionDetail = {
            TransactionID: @ViewContext.RouteData.Values["id"] ,
            TransactionDetailID: 0,
            FormID: $('#hdnNewDetailFormID').val(),
            FormTitle: $('#newDetailForms').val(),
            UnitPrice: $('#txtNewDetailPrice').val(),
            DiscountPrice: parseFloat($('#txtNewDetailDiscount').val()),
            Quantity: $('#txtNewDetailQuantity').val(),
            Notes: $('#txtNewDetailNote').val().trim(),
            Total: subtotal
        }

        $.ajax({
            url: '/transactions/AddTransactionDetail/',
            type: 'POST',
            data: JSON.stringify({ transactionDetail: transactionDetail }),
            dataType: 'json',
            traditional: true,
            contentType: 'application/json;',
            success: function (result) {
                if (result != '0') {
                    $.AlertDialog('Record saves succesfully', 'Succes', function (event) { location.reload(); }, 'lightgreen');
                    //window.location();
                    //return false;
                } else {
                    //alert("Error: Customer transaction update has failed.");
                    $.AlertDialog('Error: Customer Receipt update has failed.', 'Error Message', function (event) { }, 'lightcoral');
                }
            }
        });



        newtransactiondialog.dialog("close");
    }

    function btnAddTransaccionClick() {
        $("#new-transaction-dialog").dialog("open");
    }

    function btnSearchItemClick() {
        $("#list-dialog").dialog("open");
    };

    function updateSubtotal() {
        if ($('#txtNewDetailQuantity').val() == '' || $('#txtNewDetailPrice').val() == '') {
            $('#txtNewDetailSubtotal').val(0);
            return;
        }


        var subtotal;

        if ($('#txtNewDetailDiscount').val() == '') {
            subtotal = parseFloat($('#txtNewDetailQuantity').val()) * parseFloat($('#txtNewDetailPrice').val());
        }
        else {
            subtotal = parseFloat($('#txtNewDetailQuantity').val()) * parseFloat($('#txtNewDetailDiscount').val());
        }

        $('#txtNewDetailSubtotal').val(subtotal)
    }

    function ChosePaymentMethod(btn) {
        $("#payMethodButtons").find(".selected").removeClass("selected");
        $(btn).addClass("selected");
    }

</script>


<h2>Receipt Details</h2>

<div class="row">
    <div class="col-lg-3 pull-bottom">
        <a href="/customer/Invoice/@Url.RequestContext.RouteData.Values["id"]" target="_blank">
            @*<img src="~/images/Invoice.png" alt="View Receipt" data-toggle="tooltip" data-placement="right" title="View Receipt" />*@
            <i class="fa fa-file-text-o fa-3x fa-shadow" aria-hidden="true" style="color:steelblue" data-toggle="tooltip" title="View receipt"></i>
        </a>
    </div>


    <div class="col-lg-3 text-center">
        @{
            if (Model.Item3.TransactionStatusID == 1)
            {
                <a href="#" class="cancel">
                    @*<img src="~/images/CancelTransaction.png" data-toggle="tooltip" data-placement="left" title="Cancel Receipt" />*@
                    <i class="fa fa-ban fa-3x fa-shadow" aria-hidden="true" style="color: red;" data-toggle="tooltip" title="Cancel"></i>
                </a>
            }
        }
        @if (ViewBag.IsAdmin && Model.Item3.TransactionStatusID != 1)
        {
            <a href="#" id="lnkReOpen" class="reopen">
                @*<img src="~/images/TransactionComplete.png" data-toggle="tooltip" data-placement="left" title="Complete Receipt" />*@
                <i class="fa fa-undo fa-3x fa-shadow" aria-hidden="true" style="color: orangered;" data-toggle="tooltip" title="Reopen"></i>
            </a>
        }
    </div>

    <div class="col-lg-3 text-center">
        @{
            if (Model.Item3.TransactionStatusID == 1)
            {
                <a href="#" id="lnkRefundTop" class="complete">
                    @*<img src="~/images/TransactionComplete.png" data-toggle="tooltip" data-placement="left" title="Complete Receipt" />*@
                    <i class="fa fa-check-circle-o fa-3x fa-shadow" aria-hidden="true" style="color: forestgreen;" data-toggle="tooltip" title="Complete"></i>
                </a>
            }
        }
    </div>

    <div class="col-lg-3 pull-text-right">
        <a href="/Transactions/CustomerTransactions/@Model.Item3.CustomerID">
            @*<img src="~/images/GoBack.png" data-toggle="tooltip" data-placement="left" title="Back to Receipts" />*@
            <i class="fa fa-arrow-circle-o-left fa-shadow fa-3x" aria-hidden="true" style="color:yellowgreen" data-toggle="tooltip" title="Go back"></i>
        </a>
    </div>
</div>


<div class="well">
    <div class="row">
        <div class="col-lg-3"><strong>Customer:</strong> <div>@Model.Item3.CustomerName</div></div>
        <div class="col-lg-2">
            <strong>Customer ID:</strong>
            <div>
                @if (ViewBag.IsAdmin)
                {
                    <a id="btnChangeCustomer" onclick="$('#change-customer-dialog').dialog('open')"><i class="fa fa-share-square-o fa-lg fa-fw" aria-hidden="true" data-toggle="tooltip" title="Change customer"></i></a>
                }
                @Model.Item3.CustomerID
            </div>
        </div>
        <div class="col-lg-2"><strong>Receipt No:</strong> <div>@Url.RequestContext.RouteData.Values["id"]</div></div>
        <div class="col-lg-2"><strong>Rep:</strong> <div>@Model.Item3.TakenBy</div></div>
        <div class="col-lg-3"><strong>Receipt Date:</strong> <div>@Model.Item3.TransactionDate.ToString("MM/dd/yyyy hh:mm tt")</div></div>
    </div>
    <div class="row">
        <div class="col-lg-3"><strong>Receipt Total:</strong> <div id="lblTotalTrans" class="currencyLabel">@Model.Item3.TotalAmount</div></div>
        <div class="col-lg-2"><strong>Paid:</strong> <div id="lblTotalPaid" class="currencyLabel">@Model.Item3.TotalCollected</div></div>
        <div class="col-lg-2"><strong>Refunded:</strong> <div id="lblTotalRefunded" class="currencyLabel">@Model.Item3.RefundedAmount</div></div>
        <div class="col-lg-2"><strong>Remaining Owed:</strong> <div id="lblOwed" class="currencyLabel">@Model.Item3.TotalOwed</div></div>
        <div class="col-lg-3"><strong>Last update:</strong> <div>@Model.Item3.ModifiedDate.ToString("MM/dd/yyyy hh:mm tt")</div></div>
    </div>
</div>

@{ if (Model.Item3.TransactionStatusID == 2)
    {
        <text>
            <div id="divMsgComplete" class="alert alert-success">
                <strong>This transaction has been COMPLETED.</strong>
            </div>
        </text>
    }
    else if (Model.Item3.TransactionStatusID == 3)
    {
        <text>
            <div id="divMsgComplete" class="alert alert-danger">
                <strong>This transaction has been CANCELLED.</strong>
            </div>
        </text>
    }

}

@if (Model.Item3.TransactionStatusID == 1)
{
    <div class="row">
        <div class="col-sm-6">
            <h3>Products / Services</h3>
        </div>
        <div class="col-sm-6 text-right">
            @*<img id="btnAddTransaccion" class="imgBtn" src="~/images/addtransactionitem.png" data-toggle="tooltip" data-placement="right" title="Add New Transaction Item" onclick="btnAddTransaccionClick()" />*@
            <a href="#" id="btnAddTransaccion" onclick="btnAddTransaccionClick()">
                <i class="fa fa-shopping-basket fa-3x" aria-hidden="true" data-toggle="tooltip" title="Add product" style="color:royalblue"></i>
            </a>
        </div>
    </div>
}
<table id="tblTransDetails" class="table table-striped table-condensed">
    <tr>
        <th class="col-sm-5">Description</th>
        <th class="col-sm-1 text-center">Notes</th>
        <th class="col-sm-1 text-center">Quantity</th>
        <th class="col-sm-1 text-center">Unit Price</th>
        <th class="col-sm-2 text-center">Discount Price</th>
        <th class="col-sm-1 text-center">SubTotal</th>
        @if (ViewBag.IsAdmin)
        {
            <th class="col-sm-1"></th>

        }
    </tr>

    @{
        var decRunningTotal = 0.0M;
        var decSubTotal = 0.0M;

        foreach (var item in Model.Item1.ToList())
        {

            if (item.DiscountPrice == 0)
            {
                decSubTotal = item.Quantity * item.UnitPrice;
            }
            else
            {
                decSubTotal = item.Quantity * item.DiscountPrice;
            }
            decRunningTotal += decSubTotal;

            <tr id="@item.TransactionDetailID">
                <td>@item.FormTitle</td>
                <td class="text-center">
                    @if (!string.IsNullOrWhiteSpace(@item.Notes))
                    {
                        <a data-toggle="popover" title="Note" data-content="@item.Notes" data-trigger="hover"><i class="fa fa-commenting-o fa-2x" aria-hidden="true"></i></a>
                    }
                </td>
                <td class="text-center">@item.Quantity</td>
                <td class="text-right currencyLabel">@item.UnitPrice</td>
                <td class="text-right currencyLabel">@item.DiscountPrice</td>
                <td class="text-right currencyLabel">@decSubTotal</td>
                <td class="text-center">
                    @if (ViewBag.IsAdmin && Model.Item3.TransactionStatusID == 1)
                    {
                        <a><i id="@item.TransactionDetailID" class='delete fa fa-trash fa-shadow fa-2x' style="color:crimson" data-toggle='tooltip' data-placement='right' title='Delete'></i></a>

                    }
                </td>
            </tr>
        }
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td class="text-right"><label>Total:</label></td>
            <td class="text-right currencyLabel">@decRunningTotal</td>
            @if (ViewBag.IsAdmin)
            {
                <td></td>
            }
        </tr>
    }
</table>
<script>$(function () { $("#lblTotalTrans").text(@decRunningTotal); })</script>


<div class="row">
    <div class="col-lg-6">
        <h3>Payments</h3>
    </div>
    <div class="col-lg-6 pull-text-right">
        @{
            if (Model.Item3.TransactionStatusID == 1 && Model.Item3.TotalOwed != 0)
            {
                @*<a href="#" id="lnkAddPaymentBottom" class="payment">
                        <img src="~/images/wallet.png" data-toggle="tooltip" data-placement="left" title="Add Payment" />
                    </a>*@
                <a href="#" id="lnkAddPaymentBottom" class="payment">
                    <i class="fa fa-money fa-3x" aria-hidden="true" data-toggle="tooltip" title="Add payment" style="color:green"></i>
                </a>
            }
        }
    </div>
</div>

<table id="tblPayments" class="table table-striped table-condensed">
    <tr>
        @*<th>Pay ID</th>*@
        <th class="col-sm-5">Rep</th>
        <th class="col-sm-2">Pay Date</th>
        <th class="col-sm-2">Pay Method</th>
        <th class="col-sm-1">Check #</th>
        <th class="col-sm-1 text-center">Amount</th>
        @if (ViewBag.IsAdmin)
        {
            <th></th>
        }
    </tr>
    @{
        var decPayTotal = 0M;

        foreach (var item in Model.Item2.ToList())
        {
            decPayTotal += item.PaymentAmount;

            <tr id="@item.PaymentID">
                @*<td>@item.PaymentID</td>*@
                <td>@item.TakenBy</td>
                <td>@item.PaymentDate</td>
                <td>@item.PaymentMethodDescription</td>
                <td>@item.CheckNumber</td>
                <td class="text-right currencyLabel">@item.PaymentAmount</td>
                <td class="text-center">
                    @if (ViewBag.IsAdmin && Model.Item3.TransactionStatusID == 1)
                    {
                        <a><i id="@item.PaymentID" class='deletepayment fa fa-trash fa-shadow fa-2x' style="color:crimson" data-toggle='tooltip' data-placement='right' title='Delete payment'></i></a>

                    }
                </td>
            </tr>
        }

        <tr>
            @*<td></td>*@
            <td></td>
            <td></td>
            <td></td>
            <td class="text-right"><label>Paid:</label></td>
            <td class="text-right currencyLabel">@decPayTotal</td>
            @if (ViewBag.IsAdmin)
            {
                <td></td>
            }
        </tr>
    }
</table>
<script>
            $(function () {

                $("#lblDialogOwed").text(@Model.Item3.TotalOwed);


                $("#lblDialogPaid").text(@Model.Item3.Net);

                if(@Model.Item3.TransactionStatusID != 1){
                    $("#lnkAddPaymentBottom").hide();
                }else
                {
                    $("#lnkAddPaymentBottom").show();
                }

                $('.currencyLabel').formatCurrency();
            })</script>



@if (Model.Item4 != null && Model.Item4.Count() > 0)
{
    <div class="row">
        <div class="col-lg-6 pull-bottom">
            <h3>Refunds</h3>
        </div>
    </div>

    <table id="tblRefunds" class="table table-striped table-condensed">
        <tr>
            <th>Refund ID</th>
            <th>Refund Amount</th>
            <th>Refund Date</th>
            <th>Rep</th>
            <th>Notes</th>
        </tr>
        @{

            foreach (var item in Model.Item4.ToList())
            {

                <tr id="@item.RefundID">
                    <td>@item.RefundID</td>
                    <td class="currencyLabel">@item.RefundAmount</td>
                    <td>@item.RefundDate</td>
                    <td>@item.RefundedBy</td>
                    <td class="text-center">
                        @if (!string.IsNullOrWhiteSpace(@item.Note))
                        {
                            <a data-toggle="popover" data-title="Note" data-content="@item.Note"><i class="fa fa-commenting-o fa-2x" aria-hidden="true"></i></a>
                        }
                    </td>
                </tr>
            }

            <tr>

                <td class="text-right"><label>Refound:</label></td>
                <td class="text-right currencyLabel">@Model.Item3.RefundedAmount</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        }
    </table>
    <script>
        $(function () {
            $('.currencyLabel').formatCurrency();
        })</script>
}

<div>
    <div class="form-horizontal">
        <div class="form-group" style="color:red">
            <label for="lblOwedBottom" class="col-md-2 col-md-offset-8 control-label">Remaining Owed:</label>
            <div class="col-md-1 text-right">
                <p id="lblOwedBottom" class="form-control-static currencyLabel">@Model.Item3.TotalOwed</p>
            </div>
        </div>
    </div>
</div>

<div id="new-payment-dialog" title="Add New Payment">
    <div class="container">
        <div class="form-horizontal">
            <div class="form-group">
                <label for="lblDialogOwed" class="col-md-6 control-label">Remaining Owed:</label>
                <div class="col-md-3 text-right">
                    <p id="lblDialogOwed" class="form-control-static currencyLabel">$0.00</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-12 text-center">
                    <div id="payMethodButtons">
                        <div class="btn-group">
                            <button class="btn btn-default btn-lg" onclick="ChosePaymentMethod(this)" data-value="1">
                                <i class="fa fa-usd"></i><br>CASH
                            </button>
                            <button class="btn btn-default btn-lg" onclick="ChosePaymentMethod(this)" data-value="2">
                                <i class="fa fa-university"></i><br>CHECK
                            </button>
                            <button class="btn btn-default btn-lg" onclick="ChosePaymentMethod(this)" data-value="3">
                                <i class="fa fa-credit-card"></i><br>VISA
                            </button>
                            <button class="btn btn-default btn-lg" onclick="ChosePaymentMethod(this)" data-value="4">
                                <i class="fa fa-paper-plane-o"></i><br>DEPOSIT
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="txtPaymentAmount" class="col-md-6 control-label">Amount:</label>
                <div class="col-md-3">
                    <input type="text" id="txtPaymentAmount" class="form-control text-right" onkeypress='numericValidate(event)' autofocus>
                </div>
            </div>
            <div class="form-group">
                <label for="txtCheckNumber" class="col-md-6 control-label">Check #:</label>
                <div class="col-md-3">
                    <input type="text" id="txtCheckNumber" class="form-control" onkeypress='numericValidate(event)' />
                </div>
            </div>
        </div>
    </div>
</div>


@*<table class="table table-hover">
        <tr>
            <td>
                <label for="txtQuantity">Pay Method</label><br />
                <select id="ddlPayMethod" class="form-control">
                    <option value="1">CASH</option>
                    <option value="2">CHECK</option>
                    <option value="3">CARD</option>
                    <option value="4">DEPOSIT</option>
                </select>
            </td>

        </tr>
    </table>*@
<div id="refund-dialog" title="Receipt Refund">
    <div class="container">
        <div class="well well-lg">
            <div class="row">
                <div class="col-lg-6"><strong>Total Paid Amount:</strong></div>
                <div class="col-lg-4 currencyLabel" id="lblDialogPaid"><strong></strong></div>
            </div>
        </div>
        <table id="tblRefund" class="table table-striped">
            <tr>
                <td>
                    <div class="ui-widget">
                        <label for="txtRefundAmount">Refund Amount: </label><br />
                        <input type="text" id="txtRefundAmount" class="form-control" onkeypress='numericValidate(event)' maxlength="5">
                    </div>
                </td>
                <td>
                    <label for="txtQuantity">Pay Method</label><br />
                    <select id="ddlRefundMethod">
                        <option value="1">CASH</option>
                        <option value="2">CHECK</option>
                        <option value="3">CARD</option>
                    </select>
                </td>
                <td>
                    <label for="txtPrice">Refund Note:</label><br />
                    <input type="text" id="txtRefundNote" class="form-control" maxlength="500" />
                </td>

            </tr>
        </table>
    </div>
</div>

<div id="new-transaction-dialog" title="Add New Item">
    <input type="hidden" id="hdnNewDetailFormID" />

    <div class="container">
        <table id="tblTransDetails" class="table">
            <tr>
                <td colspan="2">
                    <label for="code">Item:</label><br />
                    <input type="text" id="newDetailForms" data-required="true" data-name="Item" class="form-control" placeholder="Type here to search">
                </td>
                <td colspan="2" class="text-right">
                    <label class="empty-label"></label>
                    @*<img src="~/images/search.png" id="search" style="padding-top:20px;" />*@
                    <button id="btnItemSearch" class="btn btn-info" onclick="btnSearchItemClick()">
                        <i class="fa fa-list-alt fa-fw" aria-hidden="true"></i>View list
                    </button>
                </td>
            </tr>
            <tr>
                <td>
                    <label for="txtNewDetailQuantity">Quantity</label><input type="text" id="txtNewDetailQuantity" class="form-control" data-required="true" onkeypress='numericValidate(event)' onkeyup="updateSubtotal();" onchange="updateSubtotal()" data-name="Quantity" />
                </td>
                <td>
                    <label for="txtNewDetailPrice">Unit Price</label> <input type="text" id="txtNewDetailPrice" class="form-control" onkeypress='numericValidate(event)' onkeyup="updateSubtotal();" onchange="updateSubtotal()" maxlength="5" data-required="true" data-name="Unit Price" />
                </td>
                <td>
                    <label for="txtNewDetailDiscount">Discount Price</label><input id="txtNewDetailDiscount" type="text" class="form-control" onkeypress='numericValidate(event)' onkeyup="updateSubtotal();" onchange="updateSubtotal()" />
                </td>
                <td>
                    <label for="txtNewDetailSubtotal">Sub-total</label><input type="text" class="form-control" id="txtNewDetailSubtotal" value="0" readonly />
                </td>
            </tr>
            <tr>
                <td colspan="6">
                    <div class="form-group">
                        <label for="txtNewDetailNote">Note:</label>
                        <textarea id="txtNewDetailNote" class="form-control" rows="6" style="min-width: 100%"></textarea>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>

<div id="list-dialog" title="Forms">
    <select id="lstForms" size="18" class="form-control"></select>
</div>


<div id="change-customer-dialog" title="Change customer">
    <div class="form-group">
        <label for="txtNewCustomerID" class="control-label">New CustomerID:</label>
        <input id="txtNewCustomerID" class="form-control" onkeypress='numericValidate(event)' maxlength="8">
    </div>
</div>
